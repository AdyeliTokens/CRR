@model IEnumerable<CRR.Models.Vistas.CRR.CRRByDepartment>

@{
    ViewBag.Title = "Index";
    Layout = Request.IsAjaxRequest() ? null : "~/Views/Shared/_Layout.cshtml";
}

@section Styles {

}

<div class="row">
    <div class="col-md-12">
        <div class="box">
            <div class="box-header with-border">
                <h3 class="box-title">Daily CRR Report</h3>

                <div class="box-tools pull-right">
                    <button type="button" class="btn btn-box-tool" data-widget="collapse">
                        <i class="fa fa-minus"></i>
                    </button>
                    <div class="btn-group">
                        <button type="button" class="btn btn-box-tool dropdown-toggle" data-toggle="dropdown">
                            <i class="fa fa-wrench"></i>
                        </button>
                        <ul class="dropdown-menu" role="menu">
                            <li><a href="#">Download</a></li>
                        </ul>
                    </div>
                    <button type="button" class="btn btn-box-tool" data-widget="remove"><i class="fa fa-times"></i></button>
                </div>
            </div>
            <!-- /.box-header -->
            <div class="box-body">
                <div class="row">
                    <div class="col-md-8">
                        <div class="chart">
                            <!-- Sales Chart Canvas -->
                            <canvas id="dayChart" style="height: 180px;"></canvas>
                        </div>
                        <!-- /.chart-responsive -->
                    </div>
                    <!-- /.col -->
                    <div class="col-md-4">
                        <p class="text-center">
                            <strong>Goal Completion</strong>
                        </p>
                        @{var i = 0;}
                        @foreach (var item in Model)
                        {
                            <div class="progress-group">
                                <span class="progress-text">@Html.DisplayFor(modelItem => item.Department.Name)</span>

                                @Html.Hidden("dateBegin" + i, item.dateBegin)
                                @Html.Hidden("dateEnd" + i, item.dateEnd)
                                @if (item.Values.Count() > 0)
                                {
                                    foreach (var d in item.Values)
                                    {
                                        <span class="progress-number">Vol: <b>@Html.DisplayFor(modelItem => d.VolumenWaste)</b>/@Html.DisplayFor(modelItem => d.VolumenProduccion)</span>
                                        <span class="progress-number">CRR: <b> @Html.DisplayFor(modelItem => d.CRR)%</b></span>

                                        <div class="progress sm">
                                            @if (d.PorcentajeVolumen <= 40)
                                            {
                                                <div class="progress-bar progress-bar-red" style="width: @d.PorcentajeVolumen%"></div>
                                            }
                                            @if (d.PorcentajeVolumen > 40 && d.PorcentajeVolumen <= 60)
                                            {
                                                <div class="progress-bar progress-bar-yellow" style="width: @d.PorcentajeVolumen%"></div>
                                            }
                                            @if (d.PorcentajeVolumen > 60 && d.PorcentajeVolumen <= 80)
                                            {
                                                <div class="progress-bar progress-bar-aqua" style="width: @d.PorcentajeVolumen%"></div>
                                            }
                                            @if (d.PorcentajeVolumen > 80)
                                            {
                                                <div class="progress-bar progress-bar-green" style="width: @d.PorcentajeVolumen%"></div>
                                            }
                                        </div>
                                    }
                                }
                                @{i++;}
                            </div>
                        }
                    </div>
                    <!-- /.col -->
                </div>
                <!-- /.row -->
            </div>
            <!-- ./box-body -->
            <div id="box-footer" class="box-footer"></div>

        </div>
        <!-- /.box -->
    </div>
    <!-- /.col -->
</div>
<!-- /.row -->




@Scripts.Render("~/JS/jquery")
@Scripts.Render("~/JS/ChartJS")
@Scripts.Render("~/JS/Sparkline")
@Scripts.Render("~/JS/Bootstrap")

<script>
    $(function ()
    {
        'use strict';

        getChartData();
        $("#scrollDiv").scroll();

        $(".sparkline").each(function () {
            var $this = $(this);
            $this.sparkline('html', $this.data());
        });

        drawDocSparklines();
        drawMouseSpeedDemo();
    });

    function getChartData()
    {
        var dateBegin = $("#dateBegin0").val();
        var dateEnd = $("#dateEnd0").val();

        $.ajax({
            dataType: "json",
            type: "POST",
            contentType: "application/json; charset=utf-8",
            traditional: true,
            url: "/Secondary/WasteData/Parametros",
            data: JSON.stringify({dateBegin: dateBegin, dateEnd: dateEnd}),
            success: function (data) {
                var dayChartCanvas = $('#dayChart').get(0).getContext('2d');
                var dayChart = new Chart(dayChartCanvas);

                var dayChartData = {
                    labels: data.lists.map(function (item2) {
                        return item2.ItemName;
                    }),
                    datasets: [
                        {
                            label: 'Plan de Producción',
                            fillColor: '#c1c7d1',
                            strokeColor: '#c1c7d1',
                            pointColor: '#c1c7d1',
                            pointStrokeColor: '#c1c7d1',
                            pointHighlightFill: '#fff',
                            pointHighlightStroke: '#c1c7d1',
                            data: data.lists.map(function (item2) {
                                return item2.VolumenProduccion;
                            })
                        },
                        {
                            label: 'Volumen de Producción',
                            fillColor: '#0AD6DC',
                            strokeColor: '#0AD6DC',
                            pointColor: '#0AD6DC',
                            pointStrokeColor: '#0AD6DC',
                            pointHighlightFill: '#fff',
                            pointHighlightStroke: '#0AD6DC',
                            data: data.lists.map(function (item2) {
                                return item2.VolumenWaste;
                            })
                        },
                        {
                            label: 'CRR',
                            fillColor: '#FFC300',
                            strokeColor: '#FFC300',
                            pointColor: '#FFC300',
                            pointStrokeColor: '#FFC300',
                            pointHighlightFill: '#fff',
                            pointHighlightStroke: '#FFC300',
                            data: data.lists.map(function (item2) {
                                return item2.CRR;
                            })
                        },
                    ]
                };

                var ChartOptions = {
                    // Boolean - If we should show the scale at all
                    showScale: true,
                    // Boolean - Whether grid lines are shown across the chart
                    scaleShowGridLines: false,
                    // String - Colour of the grid lines
                    scaleGridLineColor: 'rgba(0,0,0,.05)',
                    // Number - Width of the grid lines
                    scaleGridLineWidth: 1,
                    // Boolean - Whether to show horizontal lines (except X axis)
                    scaleShowHorizontalLines: true,
                    // Boolean - Whether to show vertical lines (except Y axis)
                    scaleShowVerticalLines: true,
                    // Boolean - Whether the line is curved between points
                    bezierCurve: true,
                    // Number - Tension of the bezier curve between points
                    bezierCurveTension: 0.3,
                    // Boolean - Whether to show a dot for each point
                    pointDot: false,
                    // Number - Radius of each point dot in pixels
                    pointDotRadius: 4,
                    // Number - Pixel width of point dot stroke
                    pointDotStrokeWidth: 1,
                    // Number - amount extra to add to the radius to cater for hit detection outside the drawn point
                    pointHitDetectionRadius: 20,
                    // Boolean - Whether to show a stroke for datasets
                    datasetStroke: true,
                    // Number - Pixel width of dataset stroke
                    datasetStrokeWidth: 2,
                    // Boolean - Whether to fill the dataset with a color
                    datasetFill: true,
                    // String - A legend template
                    legendTemplate: '<ul class=\'<%=name.toLowerCase()%>-legend\'><% for (var i=0; i<datasets.length; i++){%><li><span style=\'background-color:<%=datasets[i].lineColor%>\'></span><%=datasets[i].label%></li><%}%></ul>',
                    // Boolean - whether to maintain the starting aspect ratio or not when responsive, if set to false, will take up entire container
                    maintainAspectRatio: true,
                    // Boolean - whether to make the chart responsive to window resizing
                    responsive: true
                };

                dayChart.Line(dayChartData, ChartOptions);

                for (i = 0; i < data.lists.length; i++)
                {
                    $('<div id="column-' + i + '"></div>').addClass('col-sm-3 col-xs-6').appendTo('#box-footer');
                    $('<div id="div-' + i + '"></div>').addClass('description-block border-right').appendTo('#column-' + i);
                    var clase = data.lists[i].CRR > data.lists[i].Specs ? 'description-percentage text-red' : data.lists[i].CRR == data.lists[i].Specs ? 'description-percentage text-yellow' : 'description-percentage text-green';
                    $('<span id="span-' + i + '"> <i class="fa fa-caret-up"></i>' + data.lists[i].CRR + ' %</span >').addClass(clase).appendTo('#div-' + i);
                    $('<h5 id="h5-' + i + '" >' + data.lists[i].ItemName + '</h5>').addClass('description-header').appendTo('#div-' + i);
                    $('<h6 id="h6-' + i + '" >' + data.lists[i].FAName + '</h6>').addClass('description-header').appendTo('#div-' + i);
                    $('<span style="color:#c1c7d1"> Vol.Prod  ' + data.lists[i].VolumenProduccion + '</span>').addClass('description-text').appendTo('#div-' + i);
                    $('<br/><span style="color:#0AD6DC"> Vol.Waste ' + data.lists[i].VolumenWaste + '</span>').addClass('description-text').appendTo('#div-' + i);
                }

            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                alert('There was an error while fetching data!');
            }
        });
    }

    function drawDocSparklines() {

        // Bar + line composite charts
        $('#compositebar').sparkline('html', { type: 'bar', barColor: '#aaf' });
        $('#compositebar').sparkline([4, 1, 5, 7, 9, 9, 8, 7, 6, 6, 4, 7, 8, 4, 3, 2, 2, 5, 6, 7],
            { composite: true, fillColor: false, lineColor: 'red' });


        // Line charts taking their values from the tag
        $('.sparkline-1').sparkline();

        // Larger line charts for the docs
        $('.largeline').sparkline('html',
            { type: 'line', height: '2.5em', width: '4em' });

        // Customized line chart
        $('#linecustom').sparkline('html',
            {
                height: '1.5em', width: '8em', lineColor: '#f00', fillColor: '#ffa',
                minSpotColor: false, maxSpotColor: false, spotColor: '#77f', spotRadius: 3
            });

        // Bar charts using inline values
        $('.sparkbar').sparkline('html', { type: 'bar' });

        $('.barformat').sparkline([1, 3, 5, 3, 8], {
            type: 'bar',
            tooltipFormat: '{{value:levels}} - {{value}}',
            tooltipValueLookups: {
                levels: $.range_map({ ':2': 'Low', '3:6': 'Medium', '7:': 'High' })
            }
        });

        // Tri-state charts using inline values
        $('.sparktristate').sparkline('html', { type: 'tristate' });
        $('.sparktristatecols').sparkline('html',
            { type: 'tristate', colorMap: { '-2': '#fa7', '2': '#44f' } });

        // Composite line charts, the second using values supplied via javascript
        $('#compositeline').sparkline('html', { fillColor: false, changeRangeMin: 0, chartRangeMax: 10 });
        $('#compositeline').sparkline([4, 1, 5, 7, 9, 9, 8, 7, 6, 6, 4, 7, 8, 4, 3, 2, 2, 5, 6, 7],
            { composite: true, fillColor: false, lineColor: 'red', changeRangeMin: 0, chartRangeMax: 10 });

        // Line charts with normal range marker
        $('#normalline').sparkline('html',
            { fillColor: false, normalRangeMin: -1, normalRangeMax: 8 });
        $('#normalExample').sparkline('html',
            { fillColor: false, normalRangeMin: 80, normalRangeMax: 95, normalRangeColor: '#4f4' });

        // Discrete charts
        $('.discrete1').sparkline('html',
            { type: 'discrete', lineColor: 'blue', xwidth: 18 });
        $('#discrete2').sparkline('html',
            { type: 'discrete', lineColor: 'blue', thresholdColor: 'red', thresholdValue: 4 });

        // Bullet charts
        $('.sparkbullet').sparkline('html', { type: 'bullet' });

        // Pie charts
        $('.sparkpie').sparkline('html', { type: 'pie', height: '1.0em' });

        // Box plots
        $('.sparkboxplot').sparkline('html', { type: 'box' });
        $('.sparkboxplotraw').sparkline([1, 3, 5, 8, 10, 15, 18],
            { type: 'box', raw: true, showOutliers: true, target: 6 });

        // Box plot with specific field order
        $('.boxfieldorder').sparkline('html', {
            type: 'box',
            tooltipFormatFieldlist: ['med', 'lq', 'uq'],
            tooltipFormatFieldlistKey: 'field'
        });

        // click event demo sparkline
        $('.clickdemo').sparkline();
        $('.clickdemo').bind('sparklineClick', function (ev) {
            var sparkline = ev.sparklines[0],
                region = sparkline.getCurrentRegionFields();
            value = region.y;
            alert("Clicked on x=" + region.x + " y=" + region.y);
        });

        // mouseover event demo sparkline
        $('.mouseoverdemo').sparkline();
        $('.mouseoverdemo').bind('sparklineRegionChange', function (ev) {
            var sparkline = ev.sparklines[0],
                region = sparkline.getCurrentRegionFields();
            value = region.y;
            $('.mouseoverregion').text("x=" + region.x + " y=" + region.y);
        }).bind('mouseleave', function () {
            $('.mouseoverregion').text('');
        });
    }

    /**
     ** Draw the little mouse speed animated graph
     ** This just attaches a handler to the mousemove event to see
     ** (roughly) how far the mouse has moved
     ** and then updates the display a couple of times a second via
     ** setTimeout()
     **/
    function drawMouseSpeedDemo() {
        var mrefreshinterval = 500; // update display every 500ms
        var lastmousex = -1;
        var lastmousey = -1;
        var lastmousetime;
        var mousetravel = 0;
        var mpoints = [];
        var mpoints_max = 30;
        $('html').mousemove(function (e) {
            var mousex = e.pageX;
            var mousey = e.pageY;
            if (lastmousex > -1) {
                mousetravel += Math.max(Math.abs(mousex - lastmousex), Math.abs(mousey - lastmousey));
            }
            lastmousex = mousex;
            lastmousey = mousey;
        });
        var mdraw = function () {
            var md = new Date();
            var timenow = md.getTime();
            if (lastmousetime && lastmousetime != timenow) {
                var pps = Math.round(mousetravel / (timenow - lastmousetime) * 1000);
                mpoints.push(pps);
                if (mpoints.length > mpoints_max)
                    mpoints.splice(0, 1);
                mousetravel = 0;
                $('#mousespeed').sparkline(mpoints, { width: mpoints.length * 2, tooltipSuffix: ' pixels per second' });
            }
            lastmousetime = timenow;
            setTimeout(mdraw, mrefreshinterval);
        };
        // We could use setInterval instead, but I prefer to do it this way
        setTimeout(mdraw, mrefreshinterval);
    }
</script>






